/* ## Sbt-assembly-related settings

   This module defines settings to generate fat jar using [sbt-assembly plugin](https://github.com/softprops/assembly-sbt) and publish it,
*/
package ohnosequences.sbt.nice

import sbt._
import Keys._

import sbtassembly._, AssemblyKeys._

import ResolverSettings.autoImport._
import ohnosequences.sbt.SbtS3Resolver.autoImport._

import com.amazonaws.services.s3.AmazonS3ClientBuilder
import java.net.URI

case object AssemblySettings extends sbt.AutoPlugin {

  override def trigger = allRequirements
  override def requires =
    sbtassembly.AssemblyPlugin &&
    ResolverSettings

  case object autoImport {

    lazy val fatArtifactClassifier = settingKey[String]("Classifier suffix of the fat jar artifact")
    lazy val fatArtifactUrl = settingKey[String]("URL of the published fat artifact")

    lazy val fatArtifactUpload = taskKey[Unit]("Uploads fat-jar generated by sbt-assembly to fatArtifactUrl")
  }
  import autoImport._

  /* ### Settings */
  override def projectSettings: Seq[Setting[_]] = Seq(
    // suffix for the fat artifact:
    fatArtifactClassifier := "fat",
    // turning off tests in assembly:
    test in assembly := {},

    // mvn: "[organisation]/[module]_[scalaVersion]/[revision]/[artifact]-[revision]-[classifier].[ext]"
    // ivy: "[organisation]/[module]_[scalaVersion]/[revision]/[type]s/[artifact]-[classifier].[ext]"
    fatArtifactUrl := {
      val isMvn = publishMavenStyle.value
      val scalaV = "_"+scalaBinaryVersion.value
      val module = moduleName.value + scalaV
      val artifact = Seq(
        if (isMvn) "" else "jars/",
        module,
        if (isMvn) s"-${version.value}" else "",
        s"-${fatArtifactClassifier.value}",
        ".jar"
      ).mkString

      Seq(
        publishS3Resolver.value.url,
        organization.value,
        module,
        version.value,
        artifact
      ).mkString("/")
    },

    fatArtifactUpload := fatArtifactUploadTask.value
  )

  def fatArtifactUploadTask: DefTask[Unit] = Def.task {
    lazy val fatJar = assembly.value

    lazy val uri = new URI(fatArtifactUrl.value).normalize
    lazy val bucket = uri.getHost
    lazy val key    = uri.getPath.stripPrefix("/")

    streams.value.log.info(s"Publishing assembled artifact to [${uri.toString}]...")
    val s3 = AmazonS3ClientBuilder.standard
      .withCredentials(s3credentials.value)
      .withRegion(s3region.value.getName)
      .build()

    s3.putObject(bucket, key, fatJar)
    ()

    // NOTE: This is just another way to upload an object
    // TODO: Would be nice to have some progress reporting, but the default one doesn't do anything "/
    // val transfer = new TransferManager(s3credentials.value).upload(bucket, key, fatJar)
    // transfer.addProgressListener(new com.amazonaws.event.ProgressTracker())
    // transfer.waitForCompletion()
  }

}
